<!-- <p>header works!</p> -->
<div >
    <i class="material-icons" style="cursor: pointer;">menu</i>
</div>
<div>
    <i class="material-icons"  style=" cursor: pointer;margin-left: 1762px;
    margin-top: -26px;">settings</i>
</div>
<!-- mdi mdi-file-check -->



{
  "name": "test",
  "version": "0.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "test": "ng test",
    "lint": "ng lint",
    "e2e": "ng e2e"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "~10.2.0",
    "@angular/cdk": "^10.2.7",
    "@angular/common": "~10.2.0",
    "@angular/compiler": "~10.2.0",
    "@angular/core": "~10.2.0",
    "@angular/forms": "~10.2.0",
    "@angular/material": "^10.2.7",
    "@angular/platform-browser": "~10.2.0",
    "@angular/platform-browser-dynamic": "~10.2.0",
    "@angular/router": "~10.2.0",
    "@ng-bootstrap/ng-bootstrap": "^3.3.1",
    "@types/fabric": "^4.2.6",
    "bootstrap": "^4.6.0",
    "devextreme": "^21.1.3",
    "devextreme-angular": "21.1.3",
    "devextreme-aspnet-data-nojquery": "^2.1.1",
    "fabric": "^4.3.1",
    "fabric-history": "^1.1.0",
    "material-design-icons-iconfont": "^6.1.1",
    "rxjs": "~6.6.0",
    "rxjs-compat": "^6.6.7",
    "tslib": "^2.0.0",
    "zone.js": "~0.10.2"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "~0.1002.0",
    "@angular/cli": "~10.2.0",
    "@angular/compiler-cli": "~10.2.0",
    "@types/node": "^12.11.1",
    "@types/jasmine": "~3.5.0",
    "@types/jasminewd2": "~2.0.3",
    "codelyzer": "^6.0.0",
    "jasmine-core": "~3.6.0",
    "jasmine-spec-reporter": "~5.0.0",
    "karma": "~5.0.0",
    "karma-chrome-launcher": "~3.1.0",
    "karma-coverage-istanbul-reporter": "~3.0.2",
    "karma-jasmine": "~4.0.0",
    "karma-jasmine-html-reporter": "^1.5.0",
    "protractor": "~7.0.0",
    "ts-node": "~8.3.0",
    "tslint": "~6.1.0",
    "typescript": "~4.0.2"
  }
}


























<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Test</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
  <link href=".../material-design-icons.css" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
</head>
<body class="mat-typography">
  <app-root></app-root>
</body>
</html>







<!-- <div class="center">
    <table  id="users" >
       
            <tr>
             <th *ngFor="let recoeds of header">{{recoeds}}</th>
          <th>Action</th>
            </tr>
         
           <tr *ngFor="let test of rows">
               <td *ngFor="let recoeds of header" >
                   {{test[recoeds]}}
               </td>
               <button (click)="btnclick()">Edit</button>
           </tr>
 
       
    </table>
 </div> -->
 <!-- <div class="row"> -->
    <div class="row">
        <div class="col-lg-12">
          <div class="card">
            <div class="card-body">
              <button class=" btn btn-primary " style="    margin-left: 1035px;
              margin-top: 9px;
              margin-bottom: 15px;" (click)="btnclass()">Create new</button>
     <div class="usercontact-list">  
        <table class="table table-bordered">
        <thead>
          <tr>
            <th>profile</th>
            <th>Id</th>
            <th>Firstname</th>
            <th>Lastname</th>
            <th>Email</th>         
            <th>Place</th>
            <th>Edit</th>
            <th>Delete</th>
            
          
          </tr>
        </thead>
        <tbody>
          <tr *ngFor="let u of usercontacts"
          (rowEditEnter)="rowEditEnter($event)"
          (cellEditEnter)="cellEditEnter($event)"
          (cellEdit)="cellEdit($event)"
          (cellEditDone)="cellEditDone()"
          (cellEditExit)="cellEditExit()"
          (rowEdit)="rowEdit($event)"
          (rowEditDone)="rowEditDone()"
          (rowEditExit)="rowEditExit()" (click)="RowSelected(u);">
          <td>
            <img [src]="u.profile" style="max-width: 60px;"/> </td>
            <td> {{u.id}}</td>
            <td> {{u.firstname}} </td>
            <td>{{u.lastname}} </td>
            <td> {{u.email}} </td>
            <td>{{u.place}} </td>
            <td>
             
                <button class=" btn btn-primary "  (click)="editUserContact(u)">Edit</button>
                
            </td>
            
            <td>
              <button class="btn btn-danger ml-2 "  (click)="deleteUserContact(u) ">Delete</button>
            </td>
            
          </tr>
        </tbody>
        </table>
      </div>
    </div>
    </div>
    </div>
    </div>


    <!-- <div class="code-editor" #codeEditor></div> -->
    
    
    
    
    
    
    import { Component, OnInit,HostListener,Renderer2, ViewChild, ElementRef } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { Validators } from '@angular/forms';
import { FormGroup } from '@angular/forms';
import {Router} from '@angular/router'
import { Post } from '../post/post';
import { PostService } from '../post/post.service';
@Component({
  selector: 'app-view',
  templateUrl: './view.component.html',
  styleUrls: ['./view.component.scss']
})
export class ViewComponent implements OnInit {
  usercontacts: Post[]; // Array<string>
  usercont: Post;
  selectedUser: any;
  addForm: FormGroup;
  usercontact: Post;
  @ViewChild('logger')
  public logger: ElementRef;
  public selection = true;
  public selectionMode = 'multiple';
  public selectionModes = [];
  public $rowEditEnter = false;
  public $cellEditEnter = false;
  public $cellEdit = false;
  public $rowEdit = false;
  emailRegex = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
  id:any;
  firstname:any;
  lastname:any;
  email:any;
  place:any;
  constructor(private renderer:Renderer2,private formBuilder: FormBuilder,private ucs: PostService,private router:Router,private userService: PostService) { }

  ngOnInit(): void {
    console.log('usercontact:init');
    this.usercontacts = this.ucs.getall();
    console.log(this.usercontacts);
   
}
  
  RowSelected(u:any){
    this.selectedUser=u;   // declare variable in component.
    }
    capslockOn;
  @HostListener('window:click', ['$event']) onClick(event){
  this.getcapsfun(event);
    }
   @HostListener('window:keydown', ['$event'])
   onKeyDown(event){
   this.getcapsfun(event)
   }
   @HostListener('window:keyup', ['$event'])
    onKeyUp(event){
    if (event.getModifierState && event.getModifierState('CapsLock')) {
     this.capslockOn = true;
    } else {
     this.capslockOn = false;
    }
   }
   getcapsfun(e){if (e.getModifierState && e.getModifierState('CapsLock')) {
    this.capslockOn = true;
    } else {
     this.capslockOn = false;
    }}
  
  editUserContact(usercontact: Post) {
    console.log( "userdetails", usercontact);
    localStorage.removeItem('editUserId');
    localStorage.setItem('editUserId', usercontact.id.toString());
    this.router.navigate([`/edit`])
    // this.ucs.update(usercontact);
  }

  deleteUserContact(usercontact: Post) {
    console.log("usercontact",usercontact);
    this.ucs.delete(usercontact);
  }
  btnclass(){
    this.router.navigate(['/create'])
  }
  shapes(){
    this.router.navigate(['/shapes'])
  }
  public selectCellSelectionMode(args) {
    this.selectionMode = this.selectionModes[args.index].label;
    //  this.snackbar.open();
}
public rowEditEnter(evt) {
  evt.cancel = this.$rowEditEnter;
  this.logAnEvent(`=> 'rowEditEnter' with 'RowID':` + evt.rowID, evt.cancel);
}
public cellEditEnter(evt) {
  evt.cancel = this.$cellEditEnter;
  this.logAnEvent(`=> 'cellEditEnter' with 'value':` + evt.oldValue, evt.cancel);
}
public cellEdit(evt) {
  evt.cancel = this.$cellEdit;
  this.logAnEvent(`=> 'cellEdit' with 'newValue':` + evt.newValue, evt.cancel);
}
public cellEditDone() {
  this.logAnEvent(`=> 'cellEditDone'`);
}
public cellEditExit() {
  this.logAnEvent(`=> 'cellEditExit'`);
}
public rowEdit(evt) {
  evt.cancel = this.$rowEdit;
  this.logAnEvent(`=> 'rowEdit'`, evt.cancel);
}
public rowEditDone() {
  this.logAnEvent(`=> 'rowEditDone'`);
}
public rowEditExit() {
  this.logAnEvent(`=> 'rowEditExit'  << End of cycle >>`);
}
private logAnEvent(msg: string, canceled?: boolean) {
const createElem = this.renderer.createElement('p');

if (canceled) {
    msg = msg.concat(': has been canceled ');
}

const text = this.renderer.createText(msg);
this.renderer.appendChild(createElem, text);
const container = this.logger.nativeElement;
this.renderer.insertBefore(container, createElem, container.children[0]);
}
public clearLog() {
const  elements = this.logger.nativeElement.querySelectorAll('p');
for (let index = 0; index < elements.length; index++) {
    this.renderer.removeChild(this.logger.nativeElement, elements[index]);
}
}
enableEdit = false;
  enableEditIndex = null;
enableEditMethod(e, i) {
  console.log("eeeee",e)
  console.log("eeeee",i)
  this.enableEdit = true;
  this.enableEditIndex = i;
  console.log(i, e);
}
}





import { Injectable } from '@angular/core';
import { Post } from './post';
// import { Shape } from './shape';
@Injectable({
  providedIn: 'root'
})
export class PostService {
  usercontacts :Post []=[
    {id: 1,
    firstname: 'Alex',
    lastname: 'BlaBla',
    email: 'alex.blabla@aol.at',
    place:'polyfills',
    type:'ellipse', x:10, y:10, w:12, h:34,
    profile:'./assets/images/images2.jpeg'
  },
  {
    id: 2,
    firstname: 'Otto',
    lastname: 'Blubb',
    email: 'otto.blubb@dsl.de',
    place:'rendered',
    type:'line', x:60, y:20, w:12, h:34,
    profile:'./assets/images/download4.png'
  },
  {
    id: 3,
    firstname: 'Peter',
    lastname: 'Pan',
    email: 'peter.pan@neverland.com',
    place:'initial',
    type:'rectangle', x:30, y:30, w:12, h:34,
    profile:'./assets/images/images3.jpeg'
  },
  {
    id: 4,
    firstname: 'jemas',
    lastname: 'list',
    email: 'jemas.list@dsl.de',
    place:'styles',
    type:'rectangle', x:30, y:30, w:12, h:34,
    profile:'./assets/images/download (1).jpeg'
  },
  {
    id: 5,
    firstname: 'chunks',
    lastname: 'details',
    email: 'chunks.vdetails@dsl.de',
    place:'live',
    type:'line', x:60, y:20, w:12, h:34,
    profile:'./assets/images/download2.png'
  },
  {
    id: 6,
    firstname: 'sucess',
    lastname: 'employee',
    email: 'sucess.blubb@dsl.de',
    place:'vendors',
    type:'line', x:60, y:20, w:12, h:34,
    profile:'./assets/images/download3.jpeg'
  },
  {
    id: 7,
    firstname: 'unchange',
    lastname: 'create',
    email: 'employee.vcreate@dsl.de',
    place:'browser',
    type:'ellipse', x:10, y:10, w:12, h:34,
    profile:'./assets/images/download4.jpeg'
  },
  {
    id: 8,
    firstname: 'hash',
    lastname: 'services',
    email: 'hash.services@dsl.de',
    place:'server',
    type:'ellipse', x:10, y:10, w:12, h:34,
    profile:'./assets/images/images1.png'
  }]
  create(usercontact: Post) {
    const itemIndex = this.usercontacts.length;
    usercontact.id = this.getnextId();
    console.log(usercontact);
    this.usercontacts[itemIndex] = usercontact;
  }
  delete(usercontact: Post) {
    this.usercontacts.splice(this.usercontacts.indexOf(usercontact), 1);
  }

  update(usercontact: Post) {
    const itemIndex = this.usercontacts.findIndex(item => item.id === usercontact.id);
    console.log(itemIndex);
    this.usercontacts[itemIndex] = usercontact;
  }
  
  // find(id): Observable<Post> {
  //   return this.httpClient.get<Post>(this.apiURL + '/posts/' + id)
  //   .pipe(
  //     catchError(this.errorHandler)
  //   )
  // }
   
  getall(): Post[] {
    console.log('usercontactservice:getall');
    console.log(this.usercontacts);
    return this.usercontacts;
  }
  getUserById(id: number) {
    console.log(id);
    const itemIndex = this.usercontacts.findIndex(item => item.id === id);
    console.log(itemIndex);
    return this.usercontacts[itemIndex];
  }
  getnextId(): number {
    let highest = 0;
    this.usercontacts.forEach(function (item) {
      if (highest === 0) {
        highest = item.id;
      }
      if (highest < item.id) {
        highest = item.id;
      }
    });
    return highest + 1;
  }
  
  getShapes(){return this.usercontacts;}
}














post.ts

export interface Post {
    id:number;
    firstname:string;
    lastname:string;
    email:string;
    place:string;
    type: string;
    profile:string;
  x:number;
  y:number;
  w:number;
  h:number;
}









edit.css
div.code-editor {
    max-height: 70vh;
}
















<div class="container">
    <!-- <div class="col-md-12"> -->
      <h2 class="text-center">Edit User Contact</h2>
      <form [formGroup]="addForm" (ngSubmit)="onSubmit()">
    <div class="form-group">
      <label for="id">Id:</label>
      <input formControlName="id"required placeholder="ID" name="id" class="form-control" id="id">
      <div class="feedback-red" *ngIf="isInvalid('id')">
        
      </div>
    </div>
        <div class="form-group">
          <label for="firstname">First Name:</label>
          <input formControlName="firstname" required placeholder="First Name" name="firstname" class="form-control" id="firstname">
          <div class="feedback-red" *ngIf="isInvalid('firstname')">
            First Name is empty.
          </div>
        </div>
    
        <div class="form-group">
          <label for="lastname">Last Name:</label>
          <input formControlName="lastname" required placeholder="Last name" name="lastname" class="form-control" id="lastname">
          <div class="feedback-red" *ngIf="isInvalid('lastname')">
            Last Name is empty.
          </div>
        </div>
    
        <div class="form-group">
          <label for="email">Email address:</label>
          <input type="email" formControlName="email" required placeholder="Email" name="email" class="form-control" id="email">
          <div class="feedback-red" *ngIf="isEmailInvalid('email')">
            Email is not valid.
          </div>
        </div>
    <div class="form-group">
      <label for="place">Place:</label>
      <input type="place" formControlName="place" required placeholder="place" name="place" class="form-control" id="place">
      <div class="feedback-red" *ngIf="isInvalid('place')"></div>
    </div>
        <button button [disabled]="addForm.invalid" class="btn btn-success">Submit</button>
        <button class="btn btn-danger ml-2 " (click)="onCancel()">Cancel</button>
      </form>
    </div>
    <!-- </div> -->

