<!-- <p>header works!</p> -->
<div >
    <i class="material-icons" style="cursor: pointer;">menu</i>
</div>
<div>
    <i class="material-icons"  style=" cursor: pointer;margin-left: 1762px;
    margin-top: -26px;">settings</i>
</div>
<!-- mdi mdi-file-check -->



{
  "name": "test",
  "version": "0.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "test": "ng test",
    "lint": "ng lint",
    "e2e": "ng e2e"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "~10.2.0",
    "@angular/cdk": "^10.2.7",
    "@angular/common": "~10.2.0",
    "@angular/compiler": "~10.2.0",
    "@angular/core": "~10.2.0",
    "@angular/forms": "~10.2.0",
    "@angular/material": "^10.2.7",
    "@angular/platform-browser": "~10.2.0",
    "@angular/platform-browser-dynamic": "~10.2.0",
    "@angular/router": "~10.2.0",
    "@ng-bootstrap/ng-bootstrap": "^3.3.1",
    "@types/fabric": "^4.2.6",
    "bootstrap": "^4.6.0",
    "devextreme": "^21.1.3",
    "devextreme-angular": "21.1.3",
    "devextreme-aspnet-data-nojquery": "^2.1.1",
    "fabric": "^4.3.1",
    "fabric-history": "^1.1.0",
    "material-design-icons-iconfont": "^6.1.1",
    "rxjs": "~6.6.0",
    "rxjs-compat": "^6.6.7",
    "tslib": "^2.0.0",
    "zone.js": "~0.10.2"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "~0.1002.0",
    "@angular/cli": "~10.2.0",
    "@angular/compiler-cli": "~10.2.0",
    "@types/node": "^12.11.1",
    "@types/jasmine": "~3.5.0",
    "@types/jasminewd2": "~2.0.3",
    "codelyzer": "^6.0.0",
    "jasmine-core": "~3.6.0",
    "jasmine-spec-reporter": "~5.0.0",
    "karma": "~5.0.0",
    "karma-chrome-launcher": "~3.1.0",
    "karma-coverage-istanbul-reporter": "~3.0.2",
    "karma-jasmine": "~4.0.0",
    "karma-jasmine-html-reporter": "^1.5.0",
    "protractor": "~7.0.0",
    "ts-node": "~8.3.0",
    "tslint": "~6.1.0",
    "typescript": "~4.0.2"
  }
}


























<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Test</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
  <link href=".../material-design-icons.css" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
</head>
<body class="mat-typography">
  <app-root></app-root>
</body>
</html>







<!-- <div class="center">
    <table  id="users" >
       
            <tr>
             <th *ngFor="let recoeds of header">{{recoeds}}</th>
          <th>Action</th>
            </tr>
         
           <tr *ngFor="let test of rows">
               <td *ngFor="let recoeds of header" >
                   {{test[recoeds]}}
               </td>
               <button (click)="btnclick()">Edit</button>
           </tr>
 
       
    </table>
 </div> -->
 <!-- <div class="row"> -->
    <div class="row">
        <div class="col-lg-12">
          <div class="card">
            <div class="card-body">
              <button class=" btn btn-primary " style="    margin-left: 1035px;
              margin-top: 9px;
              margin-bottom: 15px;" (click)="btnclass()">Create new</button>
     <div class="usercontact-list">  
        <table class="table table-bordered">
        <thead>
          <tr>
            <th>profile</th>
            <th>Id</th>
            <th>Firstname</th>
            <th>Lastname</th>
            <th>Email</th>         
            <th>Place</th>
            <th>Edit</th>
            <th>Delete</th>
            
          
          </tr>
        </thead>
        <tbody>
          <tr *ngFor="let u of usercontacts"
          (rowEditEnter)="rowEditEnter($event)"
          (cellEditEnter)="cellEditEnter($event)"
          (cellEdit)="cellEdit($event)"
          (cellEditDone)="cellEditDone()"
          (cellEditExit)="cellEditExit()"
          (rowEdit)="rowEdit($event)"
          (rowEditDone)="rowEditDone()"
          (rowEditExit)="rowEditExit()" (click)="RowSelected(u);">
          <td>
            <img [src]="u.profile" style="max-width: 60px;"/> </td>
            <td> {{u.id}}</td>
            <td> {{u.firstname}} </td>
            <td>{{u.lastname}} </td>
            <td> {{u.email}} </td>
            <td>{{u.place}} </td>
            <td>
             
                <button class=" btn btn-primary "  (click)="editUserContact(u)">Edit</button>
                
            </td>
            
            <td>
              <button class="btn btn-danger ml-2 "  (click)="deleteUserContact(u) ">Delete</button>
            </td>
            
          </tr>
        </tbody>
        </table>
      </div>
    </div>
    </div>
    </div>
    </div>


    <!-- <div class="code-editor" #codeEditor></div> -->
    
    
    
    
    
    
    import { Component, OnInit,HostListener,Renderer2, ViewChild, ElementRef } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { Validators } from '@angular/forms';
import { FormGroup } from '@angular/forms';
import {Router} from '@angular/router'
import { Post } from '../post/post';
import { PostService } from '../post/post.service';
@Component({
  selector: 'app-view',
  templateUrl: './view.component.html',
  styleUrls: ['./view.component.scss']
})
export class ViewComponent implements OnInit {
  usercontacts: Post[]; // Array<string>
  usercont: Post;
  selectedUser: any;
  addForm: FormGroup;
  usercontact: Post;
  @ViewChild('logger')
  public logger: ElementRef;
  public selection = true;
  public selectionMode = 'multiple';
  public selectionModes = [];
  public $rowEditEnter = false;
  public $cellEditEnter = false;
  public $cellEdit = false;
  public $rowEdit = false;
  emailRegex = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
  id:any;
  firstname:any;
  lastname:any;
  email:any;
  place:any;
  constructor(private renderer:Renderer2,private formBuilder: FormBuilder,private ucs: PostService,private router:Router,private userService: PostService) { }

  ngOnInit(): void {
    console.log('usercontact:init');
    this.usercontacts = this.ucs.getall();
    console.log(this.usercontacts);
   
}
  
  RowSelected(u:any){
    this.selectedUser=u;   // declare variable in component.
    }
    capslockOn;
  @HostListener('window:click', ['$event']) onClick(event){
  this.getcapsfun(event);
    }
   @HostListener('window:keydown', ['$event'])
   onKeyDown(event){
   this.getcapsfun(event)
   }
   @HostListener('window:keyup', ['$event'])
    onKeyUp(event){
    if (event.getModifierState && event.getModifierState('CapsLock')) {
     this.capslockOn = true;
    } else {
     this.capslockOn = false;
    }
   }
   getcapsfun(e){if (e.getModifierState && e.getModifierState('CapsLock')) {
    this.capslockOn = true;
    } else {
     this.capslockOn = false;
    }}
  
  editUserContact(usercontact: Post) {
    console.log( "userdetails", usercontact);
    localStorage.removeItem('editUserId');
    localStorage.setItem('editUserId', usercontact.id.toString());
    this.router.navigate([`/edit`])
    // this.ucs.update(usercontact);
  }

  deleteUserContact(usercontact: Post) {
    console.log("usercontact",usercontact);
    this.ucs.delete(usercontact);
  }
  btnclass(){
    this.router.navigate(['/create'])
  }
  shapes(){
    this.router.navigate(['/shapes'])
  }
  public selectCellSelectionMode(args) {
    this.selectionMode = this.selectionModes[args.index].label;
    //  this.snackbar.open();
}
public rowEditEnter(evt) {
  evt.cancel = this.$rowEditEnter;
  this.logAnEvent(`=> 'rowEditEnter' with 'RowID':` + evt.rowID, evt.cancel);
}
public cellEditEnter(evt) {
  evt.cancel = this.$cellEditEnter;
  this.logAnEvent(`=> 'cellEditEnter' with 'value':` + evt.oldValue, evt.cancel);
}
public cellEdit(evt) {
  evt.cancel = this.$cellEdit;
  this.logAnEvent(`=> 'cellEdit' with 'newValue':` + evt.newValue, evt.cancel);
}
public cellEditDone() {
  this.logAnEvent(`=> 'cellEditDone'`);
}
public cellEditExit() {
  this.logAnEvent(`=> 'cellEditExit'`);
}
public rowEdit(evt) {
  evt.cancel = this.$rowEdit;
  this.logAnEvent(`=> 'rowEdit'`, evt.cancel);
}
public rowEditDone() {
  this.logAnEvent(`=> 'rowEditDone'`);
}
public rowEditExit() {
  this.logAnEvent(`=> 'rowEditExit'  << End of cycle >>`);
}
private logAnEvent(msg: string, canceled?: boolean) {
const createElem = this.renderer.createElement('p');

if (canceled) {
    msg = msg.concat(': has been canceled ');
}

const text = this.renderer.createText(msg);
this.renderer.appendChild(createElem, text);
const container = this.logger.nativeElement;
this.renderer.insertBefore(container, createElem, container.children[0]);
}
public clearLog() {
const  elements = this.logger.nativeElement.querySelectorAll('p');
for (let index = 0; index < elements.length; index++) {
    this.renderer.removeChild(this.logger.nativeElement, elements[index]);
}
}
enableEdit = false;
  enableEditIndex = null;
enableEditMethod(e, i) {
  console.log("eeeee",e)
  console.log("eeeee",i)
  this.enableEdit = true;
  this.enableEditIndex = i;
  console.log(i, e);
}
}





import { Injectable } from '@angular/core';
import { Post } from './post';
// import { Shape } from './shape';
@Injectable({
  providedIn: 'root'
})
export class PostService {
  usercontacts :Post []=[
    {id: 1,
    firstname: 'Alex',
    lastname: 'BlaBla',
    email: 'alex.blabla@aol.at',
    place:'polyfills',
    type:'ellipse', x:10, y:10, w:12, h:34,
    profile:'./assets/images/images2.jpeg'
  },
  {
    id: 2,
    firstname: 'Otto',
    lastname: 'Blubb',
    email: 'otto.blubb@dsl.de',
    place:'rendered',
    type:'line', x:60, y:20, w:12, h:34,
    profile:'./assets/images/download4.png'
  },
  {
    id: 3,
    firstname: 'Peter',
    lastname: 'Pan',
    email: 'peter.pan@neverland.com',
    place:'initial',
    type:'rectangle', x:30, y:30, w:12, h:34,
    profile:'./assets/images/images3.jpeg'
  },
  {
    id: 4,
    firstname: 'jemas',
    lastname: 'list',
    email: 'jemas.list@dsl.de',
    place:'styles',
    type:'rectangle', x:30, y:30, w:12, h:34,
    profile:'./assets/images/download (1).jpeg'
  },
  {
    id: 5,
    firstname: 'chunks',
    lastname: 'details',
    email: 'chunks.vdetails@dsl.de',
    place:'live',
    type:'line', x:60, y:20, w:12, h:34,
    profile:'./assets/images/download2.png'
  },
  {
    id: 6,
    firstname: 'sucess',
    lastname: 'employee',
    email: 'sucess.blubb@dsl.de',
    place:'vendors',
    type:'line', x:60, y:20, w:12, h:34,
    profile:'./assets/images/download3.jpeg'
  },
  {
    id: 7,
    firstname: 'unchange',
    lastname: 'create',
    email: 'employee.vcreate@dsl.de',
    place:'browser',
    type:'ellipse', x:10, y:10, w:12, h:34,
    profile:'./assets/images/download4.jpeg'
  },
  {
    id: 8,
    firstname: 'hash',
    lastname: 'services',
    email: 'hash.services@dsl.de',
    place:'server',
    type:'ellipse', x:10, y:10, w:12, h:34,
    profile:'./assets/images/images1.png'
  }]
  create(usercontact: Post) {
    const itemIndex = this.usercontacts.length;
    usercontact.id = this.getnextId();
    console.log(usercontact);
    this.usercontacts[itemIndex] = usercontact;
  }
  delete(usercontact: Post) {
    this.usercontacts.splice(this.usercontacts.indexOf(usercontact), 1);
  }

  update(usercontact: Post) {
    const itemIndex = this.usercontacts.findIndex(item => item.id === usercontact.id);
    console.log(itemIndex);
    this.usercontacts[itemIndex] = usercontact;
  }
  
  // find(id): Observable<Post> {
  //   return this.httpClient.get<Post>(this.apiURL + '/posts/' + id)
  //   .pipe(
  //     catchError(this.errorHandler)
  //   )
  // }
   
  getall(): Post[] {
    console.log('usercontactservice:getall');
    console.log(this.usercontacts);
    return this.usercontacts;
  }
  getUserById(id: number) {
    console.log(id);
    const itemIndex = this.usercontacts.findIndex(item => item.id === id);
    console.log(itemIndex);
    return this.usercontacts[itemIndex];
  }
  getnextId(): number {
    let highest = 0;
    this.usercontacts.forEach(function (item) {
      if (highest === 0) {
        highest = item.id;
      }
      if (highest < item.id) {
        highest = item.id;
      }
    });
    return highest + 1;
  }
  
  getShapes(){return this.usercontacts;}
}














post.ts

export interface Post {
    id:number;
    firstname:string;
    lastname:string;
    email:string;
    place:string;
    type: string;
    profile:string;
  x:number;
  y:number;
  w:number;
  h:number;
}









edit.css
div.code-editor {
    max-height: 70vh;
}
















<div class="container">
    <!-- <div class="col-md-12"> -->
      <h2 class="text-center">Edit User Contact</h2>
      <form [formGroup]="addForm" (ngSubmit)="onSubmit()">
    <div class="form-group">
      <label for="id">Id:</label>
      <input formControlName="id"required placeholder="ID" name="id" class="form-control" id="id">
      <div class="feedback-red" *ngIf="isInvalid('id')">
        
      </div>
    </div>
        <div class="form-group">
          <label for="firstname">First Name:</label>
          <input formControlName="firstname" required placeholder="First Name" name="firstname" class="form-control" id="firstname">
          <div class="feedback-red" *ngIf="isInvalid('firstname')">
            First Name is empty.
          </div>
        </div>
    
        <div class="form-group">
          <label for="lastname">Last Name:</label>
          <input formControlName="lastname" required placeholder="Last name" name="lastname" class="form-control" id="lastname">
          <div class="feedback-red" *ngIf="isInvalid('lastname')">
            Last Name is empty.
          </div>
        </div>
    
        <div class="form-group">
          <label for="email">Email address:</label>
          <input type="email" formControlName="email" required placeholder="Email" name="email" class="form-control" id="email">
          <div class="feedback-red" *ngIf="isEmailInvalid('email')">
            Email is not valid.
          </div>
        </div>
    <div class="form-group">
      <label for="place">Place:</label>
      <input type="place" formControlName="place" required placeholder="place" name="place" class="form-control" id="place">
      <div class="feedback-red" *ngIf="isInvalid('place')"></div>
    </div>
        <button button [disabled]="addForm.invalid" class="btn btn-success">Submit</button>
        <button class="btn btn-danger ml-2 " (click)="onCancel()">Cancel</button>
      </form>
    </div>
    <!-- </div> -->
    
    
    
    
    
    
    
    
    
    environmental.ts
    
    // This file can be replaced during build by using the `fileReplacements` array.
// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.
// The list of file replacements can be found in `angular.json`.

export const environment = {
  production: false,
  isProduction: false,
  // test_url:'http://192.168.7.108:8002',
  swagg_url: 'http://192.168.7.200:8080',
 swagss: 'http://192.168.7.53:5500',
//swagss: 'http://192.168.6.200:7171',
  // swagss:'http://192.168.7.210:3232',
  // test_url:'http://192.168.7.110:8006',
  demo_url: 'http://192.168.7.109:3001',
  api_url: 'http://192.168.5.167:9898/nxgdccp',
  directrc_url: 'http://192.168.5.167:9898/nxgdccp',
  img_url: 'http://192.168.5.167:9898/nxgdccp',
  imgsize: 1000000,
  timelimit: 2000,
  vmImageURL: 'http://192.168.5.167:9898/nxgdccp',
  cloudeImageURL: 'https://obdam.s3.amazonaws.com',
  mydocument: true
};

/*
 * For easier debugging in development mode, you can import the following file
 * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.
 *
 * This import should be commented out in production mode because it will have a negative impact
 * on performance if an error is thrown.
 */
// import 'zone.js/dist/zone-error';  // Included with Angular CLI.



usrserviuces

export class UserService {
  users: any;
  user: User;
  forgetpassword: boolean;
  profileTitle: string;
  constructor(private apiService: ApiService, private jwtService: JwtService, private http: Http, private router: Router) { }

  public currentUserSubject = new BehaviorSubject<User>(new User());
  public currentUser = this.currentUserSubject.asObservable().distinctUntilChanged();

  private isAuthenticatedSubject = new ReplaySubject<boolean>(1);
  public isAuthenticated = this.isAuthenticatedSubject.asObservable();
  private paramSource = new BehaviorSubject<any>('');
  navItem$ = this.paramSource.asObservable();
  clientMasterId: number = 0;

  private clientUserSubject = new BehaviorSubject<Client>(new Client());
  public clientUser = this.clientUserSubject.asObservable().distinctUntilChanged();


  clearSession() {
    this.jwtService.destroyToken();
    this.jwtService.destroygetuserid();
    this.currentUserSubject.next(new User());
    this.isAuthenticatedSubject.next(false);
    window.localStorage.clear();
  }
  changeNav(obj) {
    this.paramSource.next(obj);
  }
  populate() {
    console.log(this.jwtService.getToken(), window.localStorage['jwtToken'])
    if (this.jwtService.getToken()) {
      this.apiService.post('/Authentication/getsession', window.localStorage['jwtToken'])
        .subscribe(
          data => {
            if (data) {
              this.setAuth(data);
            } else {
              this.clientMasterId = 0;
              this.clearSession();
              window.localStorage.clear();
              this.router.navigate(['/login']);
            }
          }, err => {
            this.clientMasterId = 0;
            this.clearSession();
            window.localStorage.clear();
            this.router.navigate(['/login']);
          }
        );
    }
  }
  //Login Credentials
  attemptAuth(credentials): Observable<User> {
    return this.apiService.post('/Authentication/auth', credentials)
      .map(
        data => {
          this.users = data;
          this.setAuth(data);
          // this.setdata(data.item.clientMasterId);
          return data;
        }
      );
  }

  //Set Authentication
  setAuth(user: User) {
    console.log("user seta uth", user.token)

    this.jwtService.saveToken(user.token);
    this.jwtService.saveUserId(user.userid);

    // Set current user data into observable
    this.currentUserSubject.next(user);
    this.isAuthenticatedSubject.next(true);
  }
  imageupload(files) {
    console.log("data", files)
    return this.apiService.post("/Imagegallery/upload", files)
      .map(
        data => {
          console.log("maped", data)
          // this.users = data;
          // this.setAuth(data);
          // this.setdata(data.item.clientMasterId);
          return data
        }
      );

  }

  setClient(client: Client) {
    // Set current user data into observable
    this.clientUserSubject.next(client);
  }
  datacm: any;

  getdata(ClientMasterId: any) {
    return this.apiService.get(`/api/v1/client/getclientmasterbyid/${ClientMasterId}`)
      .map(
        data => {
          if (data) {
            this.datacm = data
            this.setClient(this.datacm);
            return data;
          }
        })
  }
//logoutstatus
logoutstatus() {
  return this.apiService.get("/Authentication/logout").map(res => { return res; });
}
//seadmin
  //graph summary
  dashboardsummery() {
    return this.apiService.get("/Sadmin/summery/").map(res => { return res; });
  }
  //manageclient
  manageclientlist() {
    return this.apiService.get("/Sadmin/clientlist/").map(res => { return res; });

  }
  //manageinfo

  manageinfo(clientid) {

    return this.apiService.get(`/Sadmin/clientdashboard/${clientid}`).map(res => { return res; });
  }

  getdocdata(doccode: any) {
    console.log("check doc code", `/Masterlibrary/doctobu1/${doccode}`)
    return this.apiService.get(`/Masterlibrary/doctobu1/${doccode}`).map(res => { return res; })
  }

  downloadPDF(clientid,design) {
    return this.apiService.get(`/Downloadfile/ActionButton/${clientid}/${design}/`).map(res => { return res; });
  }
  downloadPDFstructdoc(clientid,tablename) {
    return this.apiService.getPDFFileFromServer(`/Downloadfile/pdfdownloadforstructureddoc/${clientid}/${tablename}`).map(res => { return res; });
  }
  downloadPDFstrucDOC(data) {
    return this.apiService.postPDFFileFromServer(`/Downloadfile/structurepdfdownload/`, data).map(res => { return res; });
  }

  submit_masterdocname(value) {
    return this.apiService.post(`/Managedocument/updatemasterdocname`, value).map(res => { return res; });
  }
  update_newpagename(value) {
    return this.apiService.post(`/Managedocument/pagerename`, value).map(res => { return res; });
  }

  setdata(ClientMasterId: any) {
    return this.apiService.get(`/api/v1/client/getclientmasterbyid/${ClientMasterId}`)
      .subscribe(
        data => {
          // data.clientData = this.clientmaster
          console.log(data)
          this.setClient(data);
          return data;
        })
  }



  /* Super Admin - Client List - Statrt */
  getClientListData() {
    return this.apiService.get("/client/clientlist").map(res => { return res; });
  }
  Documentcode() {
    return this.apiService.get("/Form/documentcode").map(res => { return res; });
  }
  Doccode() {
    return this.apiService.get("/Masterlibrary/doccode/").map(res => { return res; });
  }
  getStagingtoProductionData() {
    return this.apiService.get("/Masterlibrary/staging/").map(res => { return res; });
  }
  getCommonDoctoButable2Data() {
    return this.apiService.get("/Masterlibrary/doctobu2/").map(res => { return res; });
  }
  
  
  
  api services
  
  
  import { Injectable } from '@angular/core';
import { Headers, Http, Response, URLSearchParams, RequestOptions, ResponseContentType } from '@angular/http';
import { Observable } from 'rxjs/Rx';
import { environment } from '../../../environments/environment';
import { JwtService } from './jwt.service';
import { HttpClient, HttpHeaders } from '@angular/common/http';


@Injectable()
export class ApiService {
  constructor(private http: Http, private https: HttpClient, private jwtService: JwtService) { }


  private setHeaders(): Headers {
    const headersConfig = {
      'Content-Type': 'application/json',
      'X-CSRFToken': 'ERUGK3xXSn82hNZp85uRY2oFTNCaqA6y4iPGx8Aj0PtWxm7PXv7Bt1nKSOdfaVTA',
      'Accept': 'application/json'
    };
    if (this.jwtService.getToken()) {
      headersConfig['Authorization'] = `${this.jwtService.getToken()}`;
    }
    // console.log(Headers);
    return new Headers(headersConfig);
  }

  private setHeadersUpload(): Headers {
    const headersConfig = {
      // boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW
      // 'Access-Control-Allow-Origin':'*',
      'Content-Type': 'multipart/form-data',
      'X-CSRFToken': 'ERUGK3xXSn82hNZp85uRY2oFTNCaqA6y4iPGx8Aj0PtWxm7PXv7Bt1nKSOdfaVTA',
      'Accept': 'application/json'
    };
    if (this.jwtService.getToken()) {
      headersConfig['Authorization'] = `${this.jwtService.getToken()}`;
    }
    console.log(Headers);
    console.log(headersConfig);
    return new Headers(headersConfig);
  }

  private formatErrors(error: any) {
    //  console.log("err",error)
    return Observable.throw(error.json());
  }
  private setHeaderDownload(): Headers {
    const headersConfig = {
      'X-CSRFToken': 'ERUGK3xXSn82hNZp85uRY2oFTNCaqA6y4iPGx8Aj0PtWxm7PXv7Bt1nKSOdfaVTA',
      'Accept': 'application/json',
      'Content-Type': 'application/zip',
      // 'Accept': 'application/zip'
        };
        if (this.jwtService.getToken()) {
          headersConfig['Authorization'] = `${this.jwtService.getToken()}`;
        }
        console.log(Headers);
        return new Headers(headersConfig);
      }
      private setHeaderepubMDownload(): Headers {
        const headersConfig = {
          'Content-Type':'application/json',
          'X-CSRFToken': 'ERUGK3xXSn82hNZp85uRY2oFTNCaqA6y4iPGx8Aj0PtWxm7PXv7Bt1nKSOdfaVTA',
          'Accept': 'application/json',
          
      // 'Accept': 'application/zip'
        };
        if (this.jwtService.getToken()) {
          headersConfig['Authorization'] = `${this.jwtService.getToken()}`;
        }
        console.log(Headers);
        return new Headers(headersConfig);
      }
      private setHeaderPDF(): Headers {

        const headersConfig = {
          'Content-Type': 'application/json',
          'X-CSRFToken': 'ERUGK3xXSn82hNZp85uRY2oFTNCaqA6y4iPGx8Aj0PtWxm7PXv7Bt1nKSOdfaVTA',
          'Accept': 'application/json'
          // 'Accept': 'application/zip'
        };
        if (this.jwtService.getToken()) {
          headersConfig['Authorization'] = `${this.jwtService.getToken()}`;
        }
        console.log(Headers);
        return new Headers(headersConfig);
      }
      private setHeaderPDFDownload(): Headers {
        const headersConfig = {
          'X-CSRFToken': 'ERUGK3xXSn82hNZp85uRY2oFTNCaqA6y4iPGx8Aj0PtWxm7PXv7Bt1nKSOdfaVTA',
          'Accept': 'application/json',
          'Content-Type': 'application/pdf',
      // 'Accept': 'application/zip'
        };
        if (this.jwtService.getToken()) {
          headersConfig['Authorization'] = `${this.jwtService.getToken()}`;
        }
        console.log(Headers);
        return new Headers(headersConfig);
      }
      // private formatErrorss(error: any) {
      //   //  console.log("err",error)
      //    return Observable.throw(error.json());
      // }
      private setHeaderZIPDownload(): Headers {
        const headersConfig = {
          'X-CSRFToken': 'ERUGK3xXSn82hNZp85uRY2oFTNCaqA6y4iPGx8Aj0PtWxm7PXv7Bt1nKSOdfaVTA',
          'Accept': 'application/json',
          'Content-Type': 'application/zip',
      // 'Accept': 'application/zip'
        };
        if (this.jwtService.getToken()) {
          headersConfig['Authorization'] = `${this.jwtService.getToken()}`;
        }
        console.log(Headers);
        return new Headers(headersConfig);
      }
      private setHeaderCSVDownload(): Headers {
        const headersConfig = {
          'X-CSRFToken': 'ERUGK3xXSn82hNZp85uRY2oFTNCaqA6y4iPGx8Aj0PtWxm7PXv7Bt1nKSOdfaVTA',
          'Accept': 'application/json',
          'Content-Type': 'application/csv',
      // 'Accept': 'application/zip'
        };
        if (this.jwtService.getToken()) {
          headersConfig['Authorization'] = `${this.jwtService.getToken()}`;
        }
        console.log(Headers);
        return new Headers(headersConfig);
      }
      // private formatErrorss(error: any) {
      //   //  console.log("err",error)
      //    return Observable.throw(error.json());
      // }
 
      postPDFFileFromServer(path: string, body: Object = {}, params: URLSearchParams = new URLSearchParams()): Observable<any> {
        return this.http.post(`${environment.swagss}${path}`, JSON.stringify(body), { responseType: ResponseContentType.Blob, headers: this.setHeaderPDF(), search: params })
          .catch(this.formatErrors)
          .map((res: Response) => res);
      }
    

      get(path: string, params: URLSearchParams = new URLSearchParams()): Observable<any> {
        return this.http.get(`${environment.swagss}${path}`, { headers: this.setHeaders(), search: params })
        .catch(this.formatErrors)
        .map((res: Response) => res.json());
      }
      
      gett(path: string, params: URLSearchParams = new URLSearchParams()): Observable<any> {
        return this.http.get(`${environment.demo_url}${path}`, { headers: this.setHeaders(), search: params })
        .catch(this.formatErrors)
        .map((res: Response) => res.json());
      }
      getFileFromServer(path: string, params: URLSearchParams = new URLSearchParams()): Observable<any> {
        return this.http.get(`${environment.swagss}${path}`, {responseType: ResponseContentType.Blob, headers: this.setHeaderDownload(), search: params })
        .catch(this.formatErrors)
        .map((res: Response) => res);
      }
      getPDFFileFromServer(path: string, params: URLSearchParams = new URLSearchParams()): Observable<any> {
        return this.http.get(`${environment.swagss}${path}`, {responseType: ResponseContentType.Blob, headers: this.setHeaderPDFDownload(), search: params })
        .catch(this.formatErrors)
        .map((res: Response) => res);
      }
      getzipfiledownload(path: string, params: URLSearchParams = new URLSearchParams()): Observable<any> {
        return this.http.get(`${environment.swagss}${path}`, {responseType: ResponseContentType.Blob, headers: this.setHeaderZIPDownload(), search: params })
        .catch(this.formatErrors)
        .map((res: Response) => res);
      }
      getexportfiledownload(path: string, params: URLSearchParams = new URLSearchParams()): Observable<any> {
        return this.http.get(`${environment.swagss}${path}`, {responseType: ResponseContentType.Blob, headers: this.setHeaderCSVDownload(), search: params })
        .catch(this.formatErrors)
        .map((res: Response) => res);
      }

        post(path: string, body: Object = {}): Observable<any> {
            return this.http.post(
            `${environment.swagss}${path}`,
            JSON.stringify(body),
            { headers: this.setHeaders() }
            ).map((res: Response) => res.json())
            .catch(this.formatErrors)
        }
        postepubmergedownload(path: string, body: Object = {}): Observable<any> {
          return this.http.post(
          `${environment.swagss}${path}`,
          JSON.stringify(body),
          { responseType: ResponseContentType.Blob,headers: this.setHeaderepubMDownload() }
          ).map((res: Response) => res)
          .catch(this.formatErrors)
      }
        postupload(path: string, body: Object = {}): Observable<any> {
          return this.http.post(
          `${environment.swagss}${path}`,
          JSON.stringify(body),
          { headers: this.setHeadersUpload() }
          ).map((res: Response) => res.json())
          .catch(this.formatErrors)
      }
       

        put(path: string, body: Object = {}): Observable<any> {
          return this.http.put(
            `${environment.swagss}${path}`,
            JSON.stringify(body),
            { headers: this.setHeaders() }
                  )
                  .catch(this.formatErrors)
                  .map((res: Response) => res.json());
        }

        delete(path: string, body: Object = {}): Observable<any> {
          return this.http.delete(
            `${environment.swagss}${path}`,
            // JSON.stringify(body),
            { headers: this.setHeaders() }
                  )
                  .catch(this.formatErrors)
                  .map((res: Response) => res.json());
        }


}


jwtservices

import { Injectable } from '@angular/core';


@Injectable()
export class JwtService {
     getToken(): String {
        return window.localStorage['jwtToken'];
      }

      saveToken(token: String) {
        window.localStorage['jwtToken'] = token;
      } 

      getUserAccountId(): String {
        return window.localStorage['useraccountid'];
      }

      saveUserAccountId(useraccountid: number) {

        window.localStorage['useraccountid'] = String(useraccountid);
      }
      destroyToken() {
        window.localStorage.removeItem('jwtToken');
      }
      destroygetUserAccountId(){
        window.localStorage.removeItem('useraccountid');
      }

      saveUserId(userid: number) {
        window.localStorage['userid'] = String(userid);
      }
      destroygetuserid(){
        window.localStorage.removeItem('userid');
      }

}

